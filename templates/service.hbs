{{>readme}}

export interface IService{
	info: IServiceInfo;
	servers: Array<IServer>;
}
export interface IServiceInfo{
	version: string;
	title: string;
	description?: string;
}
export interface IServer{
	url: string;
	description?: string;
	variables?: Map<String, any>;
};
export interface I{{info.title}}Service{
	info: IServiceInfo;
	servers: Array<IServer>;
}
//INTERFACES
{{#each endpoints}}
	{{>interface_input}}
{{/each}}

//httpActionCreator(`/resources/newsletter/subscription`, METHODS.post, FETCH_EMAIL, { body: { email: email }});

const httpActionCreator= (
	url: string,
	method: string,
	action: string,
	body: any,
	header: any,
): Promise<any> => {return Promise.resolve({})}

export default class {{info.title}}Service implements I{{info.title}}Service{
	public info: IServiceInfo;
	public servers: Array<IServer>;
	constructor(){
		this.info =  {version: '{{ info.version }}', title: '{{ info.title }}',  };
		this.servers = [ {{#each servers}}
		{  url: '{{this.url}}', description: '{{this.description}}' },
	{{/each}} ];
	}
	/* METHODS */
	{{#each endpoints}}
		{{>method}}
	{{/each}}
}


const service = new MothershipService();
