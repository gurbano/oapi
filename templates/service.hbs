{{>readme}}

import {
  {{#each schemas}}
    {{this.name}},
  {{/each}}
} from './schemas.out'

import {
  {{#each params}}
    {{this.name}},
  {{/each}}
} from './params.out'

//COMMON UTILS - (TO REFACTOR)
const toQueryString = (paramsMap: any ) => {
  let ret = Object.keys(paramsMap || {}).map(k => `${k}=${paramsMap[k]}`).join('&');
  return encodeURI(ret);
};
const ApiCallWrapper= (
	url: string,
	method: string,
	action: string,
	body: {},
	header: {},
  cookie: {},
): Promise<any> => {return Promise.resolve({})}

//COMMON INTERFACES
export interface IService{
	info: IServiceInfo;
	servers: Array<IServer>;
}
export interface IServiceInfo{
	version: string;
	title: string;
	description?: string;
}
export interface IServer{
	url: string;
	description?: string;
	variables?: Map<String, any>;
};
export interface I{{info.title}}Service{
	info: IServiceInfo;
	servers: Array<IServer>;
}

{{#each refs}}
    {{>interface_refs}}
{{/each}}

//ENDPOINTS INTERFACES
{{#each endpoints}}
  // {{this.operationId}} input
	{{>interface_input}}

  // {{this.operationId}} output
  {{>interface_output}}

{{/each}}

//SERVICE CLASS
export default class {{info.title}}Service implements I{{info.title}}Service{
	public info: IServiceInfo;
	public servers: Array<IServer>;
	constructor(){
		this.info =  {version: '{{ info.version }}', title: '{{ info.title }}',  };
		this.servers = [ {{#each servers}}
		{  url: '{{this.url}}', description: '{{this.description}}' },
	{{/each}} ];
	}
	/* METHODS */
	{{#each endpoints}}
		{{>method}}
	{{/each}}
}


const service = new MothershipService();
