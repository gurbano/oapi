//this file is autogenerated
//COMMON UTILS - (TO REFACTOR)
const toQueryString = (paramsMap: any ) => {
  let ret = Object.keys(paramsMap || {}).map(k => `${k}=${paramsMap[k]}`).join('&');
  return encodeURI(ret);
};
const ApiCallWrapper= (
	url: string,
	method: string,
	action: string,
	body: {},
	header: {},
  cookie: {},
): Promise<any> => {return Promise.resolve({})}

//COMMON INTERFACES
export interface IService{
	info: IServiceInfo;
	servers: Array<IServer>;
}
export interface IServiceInfo{
	version: string;
	title: string;
	description?: string;
}
export interface IServer{
	url: string;
	description?: string;
	variables?: Map<String, any>;
};
export interface IMothershipService{
	info: IServiceInfo;
	servers: Array<IServer>;
}

//ENDPOINTS INTERFACES
  // getProductListingPage input
	export interface IgetProductListingPageParameters{
			storeCode: string; //Selected store code - eg. UK (found in path)
			productListingId: string; //Product Listing Page id. Should be human readable and can contain slashes. - eg.  (found in path)
	}

  // getProductListingPage output
  export interface IgetProductListingPageResponse{
        //200 - 
        description: string;
        title: string;
        heroImage: object;
        breadcrumbs: Array<any>;
        links: Array<any>;
        heroLinks: Array<any>;
        filters: Array<any>;
        products: Array<any>;
        
  }

  // getBasketSummary input
	export interface IgetBasketSummaryParameters{
			storeCode: string; //Selected store code - eg. UK (found in path)
			Authorization: string; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
	}

  // getBasketSummary output
  export interface IgetBasketSummaryResponse{
        //200 - 
        totalQuantity: number;
        price: any;
        
  }


//SERVICE CLASS
export default class MothershipService implements IMothershipService{
	public info: IServiceInfo;
	public servers: Array<IServer>;
	constructor(){
		this.info =  {version: '1.0.0', title: 'Mothership',  };
		this.servers = [ 
		{  url: 'http://mothership-516381200.eu-west-1.elb.amazonaws.com', description: 'staging environment' },
	 ];
	}
	/* METHODS */
		/*	--- getProductListingPage: Get product listing page model ---
			Returns data needed for PLP.
		
			ENDPOINT: /api/content/${storeCode}/productlisting/${productListingId}
			METHOD: get
			TAGS: []
		*/
		
		
		async getProductListingPage(args: IgetProductListingPageParameters): Promise<IgetProductListingPageResponse> {
		
			const {  storeCode , productListingId , } = args;
		  const body = {  }
		  const header = {  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/content/${storeCode}/productlisting/${productListingId}?${queryString}`, //url
				"get", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- getBasketSummary: Get basket summary ---
			Returns basket value and number of items.
		
			ENDPOINT: /api/resource/${storeCode}/basket/summary
			METHOD: get
			TAGS: []
		*/
		
		
		async getBasketSummary(args: IgetBasketSummaryParameters): Promise<IgetBasketSummaryResponse> {
		
			const {  storeCode , Authorization , } = args;
		  const body = {  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resource/${storeCode}/basket/summary?${queryString}`, //url
				"get", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
}


const service = new MothershipService();
