//this file is autogenerated
import {
    INewsletterSubscription,
    IPrice,
    IBasketSummary,
    IAccessTokenResponse,
    IAuthData,
    IQuantity,
    IRuntimeConfigurationSpace,
    IRuntimeConfiguration,
    IFilter,
    IFilterOption,
    ISku,
    IWidget,
    ICarouselWidget,
    IGalleryWidget,
    IInformationMapWidget,
    ITwoColumnWidget,
    IVideoBlockWidget,
    ICrossSellWidget,
    ICrossSellSku,
    IDetailedProductDescription,
    IFeatureBlockItem,
    IPriceContainer,
    IImage,
    ILink,
    IListOfLinks,
    IExpandedLink,
    IImageLink,
    INavigationModel,
    INavigationItem,
    ISingleLevelWithBanner,
    ISingleLevelImageLinks,
    IExpandedLinksWithBanner,
    IMultiLevelWithBanner,
    IMultiLevelWithImageGrid,
    IMultiLevelWithMediaLinks,
    IProductDetailsModel,
    IProductListingModel,
    IProductPreview,
    IAddressBook,
    IAddress,
} from './schemas.out'

import {
    IStoreParam,
    IAuthHeaderParam,
    IBasketIdParam,
    ILineItemIdParam,
} from './params.out'

//COMMON UTILS - (TO REFACTOR)
const toQueryString = (paramsMap: any ) => {
  let ret = Object.keys(paramsMap || {}).map(k => `${k}=${paramsMap[k]}`).join('&');
  return encodeURI(ret);
};
const ApiCallWrapper= (
	url: string,
	method: string,
	action: string,
	body: {},
	header: {},
  cookie: {},
): Promise<any> => {return Promise.resolve({})}

//COMMON INTERFACES
export interface IService{
	info: IServiceInfo;
	servers: Array<IServer>;
}
export interface IServiceInfo{
	version: string;
	title: string;
	description?: string;
}
export interface IServer{
	url: string;
	description?: string;
	variables?: Map<String, any>;
};
export interface IMothershipService{
	info: IServiceInfo;
	servers: Array<IServer>;
}


//ENDPOINTS INTERFACES
  // createSubscription input
	export interface IcreateSubscriptionParameters{
			requestBody?: INewsletterSubscription; // - eg.  (found in body)
	}

  // createSubscription output
  export interface IcreateSubscriptionResponse{
        code: string;//200 
        data: null;
  }

  // getRuntimeConfiguration input
	export interface IgetRuntimeConfigurationParameters{
			spaceId: string; //ID of space. Configured in Contentful. - eg. uk-middle-tier (found in path)
	}

  // getRuntimeConfiguration output
  export interface IgetRuntimeConfigurationResponse{
        code: string;//|200|404 
        data: |IRuntimeConfigurationSpace|undefined;
  }

  // addProductToWishlist input
	export interface IaddProductToWishlistParameters{
			Authorization: IAuthHeaderParam; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			productId: string; //Product id. - eg. qgqvhocdkrpwy2lqon2gsy3ll5vwszdnmfxhgx3lnfzxg&#x3D; (found in path)
	}

  // addProductToWishlist output
  export interface IaddProductToWishlistResponse{
        code: string;//204 
        data: null;
  }

  // getAddressBook input
	export interface IgetAddressBookParameters{
			Authorization: IAuthHeaderParam; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			includeAll: boolean; //Flag to include all additional addresses in the response. - eg. true (found in query)
	}

  // getAddressBook output
  export interface IgetAddressBookResponse{
        code: string;//200 
        data: IAddressBook;
  }

  // getNavigation input
	export interface IgetNavigationParameters{
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
	}

  // getNavigation output
  export interface IgetNavigationResponse{
        code: string;//200 
        data: INavigationModel;
  }

  // getProductListingPage input
	export interface IgetProductListingPageParameters{
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			productListingId: string; //Product Listing Page id. Should be human readable and can contain slashes. - eg.  (found in path)
	}

  // getProductListingPage output
  export interface IgetProductListingPageResponse{
        code: string;//200 
        data: IProductListingModel;
  }

  // getProductPage input
	export interface IgetProductPageParameters{
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			productId: string; //Product id. Human readable and can contain slashes. - eg.  (found in path)
	}

  // getProductPage output
  export interface IgetProductPageResponse{
        code: string;//200 
        data: IProductDetailsModel;
  }

  // getBasketSummary input
	export interface IgetBasketSummaryParameters{
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			Authorization: IAuthHeaderParam; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
	}

  // getBasketSummary output
  export interface IgetBasketSummaryResponse{
        code: string;//200 
        data: IBasketSummary;
  }

  // addProductToBasket input
	export interface IaddProductToBasketParameters{
			Authorization: IAuthHeaderParam; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			productId: string; //Product id. - eg. qgqvhocdkrpwy2lqon2gsy3ll5vwszdnmfxhgx3lnfzxg&#x3D; (found in path)
			requestBody?: IQuantity; // - eg.  (found in body)
	}

  // addProductToBasket output
  export interface IaddProductToBasketResponse{
        code: string;//204 
        data: null;
  }

  // updateProductInBasket input
	export interface IupdateProductInBasketParameters{
			Authorization: IAuthHeaderParam; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			basketId: IBasketIdParam; //Basket identifier - eg. ha3tezrtmy2diljummztkljumi3&#x3D; (found in path)
			lineItemId: ILineItemIdParam; //Line item identifier - eg. meytimzsgiygkljumvrgkljumu&#x3D; (found in path)
			requestBody?: IQuantity; // - eg.  (found in body)
	}

  // updateProductInBasket output
  export interface IupdateProductInBasketResponse{
        code: string;//204 
        data: null;
  }

  // removeProductFromBasket input
	export interface IremoveProductFromBasketParameters{
			Authorization: IAuthHeaderParam; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			basketId: IBasketIdParam; //Basket identifier - eg. ha3tezrtmy2diljummztkljumi3&#x3D; (found in path)
			lineItemId: ILineItemIdParam; //Line item identifier - eg. meytimzsgiygkljumvrgkljumu&#x3D; (found in path)
	}

  // removeProductFromBasket output
  export interface IremoveProductFromBasketResponse{
        code: string;//204 
        data: null;
  }

  // emptyBasket input
	export interface IemptyBasketParameters{
			Authorization: IAuthHeaderParam; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			basketId: IBasketIdParam; //Basket identifier - eg. ha3tezrtmy2diljummztkljumi3&#x3D; (found in path)
	}

  // emptyBasket output
  export interface IemptyBasketResponse{
        code: string;//204 
        data: null;
  }

  // authenticate input
	export interface IauthenticateParameters{
			storeCode: IStoreParam; //Selected store code - eg. UK (found in path)
			Authorization: string; //optional public token, if merge is needed during REGISTERED user login - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
			requestBody?: IAuthData; // - eg.  (found in body)
	}

  // authenticate output
  export interface IauthenticateResponse{
        code: string;//200 
        data: IAccessTokenResponse;
  }

  // unauthorizeMethod input
	export interface IunauthorizeMethodParameters{
			Authorization: IAuthHeaderParam; //Authorization token - eg. Bearer 1319c1a7-b984-4765-b25e-1aafbcbd72b1 (found in header)
	}

  // unauthorizeMethod output
  export interface IunauthorizeMethodResponse{
        code: string;//200 
        data: null;
  }


//SERVICE CLASS
export default class MothershipService implements IMothershipService{
	public info: IServiceInfo;
	public servers: Array<IServer>;
	constructor(){
		this.info =  {version: '1.0.0', title: 'Mothership',  };
		this.servers = [ 
		{  url: 'http://mothership-516381200.eu-west-1.elb.amazonaws.com', description: 'staging environment' },
	 ];
	}
	/* METHODS */
		/*	--- createSubscription: Create a subscription ---
			Creates customer newsletter subscription.
		
			ENDPOINT: /api/resources/newsletter/subscription
			METHOD: post
			TAGS: [newsletter subscription]
		*/
		
		
		async createSubscription(args: IcreateSubscriptionParameters): Promise<IcreateSubscriptionResponse> {
		
			const {  requestBody , } = args;
		  const body = {  requestBody,  }
		  const header = {  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/newsletter/subscription?${queryString}`, //url
				"post", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- getRuntimeConfiguration: Get all configuration entries for the given space ---
			Returns all the configuration for the given space. The space and its configurations are setup and managed in Contentful. Use this endpoint for configuration that you wish to be able to change quickly at runtime, for example emergency feature switches.
		
			ENDPOINT: /api/resources/runtimeconfig/${spaceId}
			METHOD: get
			TAGS: [configuration]
		*/
		
		
		async getRuntimeConfiguration(args: IgetRuntimeConfigurationParameters): Promise<IgetRuntimeConfigurationResponse> {
		
			const {  spaceId , } = args;
		  const body = {  }
		  const header = {  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/runtimeconfig/${spaceId}?${queryString}`, //url
				"get", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- addProductToWishlist: Add product to a wishlist ---
			description missing
		
			ENDPOINT: /api/resources/${storeCode}/wishlist/${productId}
			METHOD: put
			TAGS: [wishlist]
		*/
		
		
		async addProductToWishlist(args: IaddProductToWishlistParameters): Promise<IaddProductToWishlistResponse> {
		
			const {  Authorization , storeCode , productId , } = args;
		  const body = {  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/${storeCode}/wishlist/${productId}?${queryString}`, //url
				"put", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- getAddressBook: Get the address book for the customer ---
			Returns all the adresses for the given customer
		
			ENDPOINT: /api/resources/${storeCode}/addressBook/
			METHOD: get
			TAGS: [address address book]
		*/
		
		
		async getAddressBook(args: IgetAddressBookParameters): Promise<IgetAddressBookResponse> {
		
			const {  Authorization , storeCode , includeAll , } = args;
		  const body = {  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  includeAll,  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/${storeCode}/addressBook/?${queryString}`, //url
				"get", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- getNavigation: Get navigation data model ---
			Returns data needed for navigation panel on charlotte&#x27;s webpage.
		
			ENDPOINT: /api/content/${storeCode}/navigation
			METHOD: get
			TAGS: [content]
		*/
		
		
		async getNavigation(args: IgetNavigationParameters): Promise<IgetNavigationResponse> {
		
			const {  storeCode , } = args;
		  const body = {  }
		  const header = {  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/content/${storeCode}/navigation?${queryString}`, //url
				"get", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- getProductListingPage: Get product listing page model ---
			Returns data needed for PLP.
		
			ENDPOINT: /api/content/${storeCode}/productlisting/${productListingId}
			METHOD: get
			TAGS: [content]
		*/
		
		
		async getProductListingPage(args: IgetProductListingPageParameters): Promise<IgetProductListingPageResponse> {
		
			const {  storeCode , productListingId , } = args;
		  const body = {  }
		  const header = {  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/content/${storeCode}/productlisting/${productListingId}?${queryString}`, //url
				"get", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- getProductPage: Get product data model ---
			Returns data needed for PDP.
		
			ENDPOINT: /api/content/${storeCode}/product/${productId}
			METHOD: get
			TAGS: [content]
		*/
		
		
		async getProductPage(args: IgetProductPageParameters): Promise<IgetProductPageResponse> {
		
			const {  storeCode , productId , } = args;
		  const body = {  }
		  const header = {  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/content/${storeCode}/product/${productId}?${queryString}`, //url
				"get", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- getBasketSummary: Get basket summary ---
			Returns basket value and number of items.
		
			ENDPOINT: /api/resource/${storeCode}/basket/summary
			METHOD: get
			TAGS: [basket]
		*/
		
		
		async getBasketSummary(args: IgetBasketSummaryParameters): Promise<IgetBasketSummaryResponse> {
		
			const {  storeCode , Authorization , } = args;
		  const body = {  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resource/${storeCode}/basket/summary?${queryString}`, //url
				"get", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- addProductToBasket: Add product to the basket ---
			description missing
		
			ENDPOINT: /api/resources/${storeCode}/basket/${productId}
			METHOD: put
			TAGS: [basket]
		*/
		
		
		async addProductToBasket(args: IaddProductToBasketParameters): Promise<IaddProductToBasketResponse> {
		
			const {  Authorization , storeCode , productId , requestBody , } = args;
		  const body = {  requestBody,  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/${storeCode}/basket/${productId}?${queryString}`, //url
				"put", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- updateProductInBasket: Update lineitem in the basket ---
			description missing
		
			ENDPOINT: /api/resources/${storeCode}/basket/${basketId}/${lineItemId}
			METHOD: put
			TAGS: [basket]
		*/
		
		
		async updateProductInBasket(args: IupdateProductInBasketParameters): Promise<IupdateProductInBasketResponse> {
		
			const {  Authorization , storeCode , basketId , lineItemId , requestBody , } = args;
		  const body = {  requestBody,  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/${storeCode}/basket/${basketId}/${lineItemId}?${queryString}`, //url
				"put", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- removeProductFromBasket: Delete product from basket ---
			description missing
		
			ENDPOINT: /api/resources/${storeCode}/basket/${basketId}/${lineItemId}
			METHOD: delete
			TAGS: [basket]
		*/
		
		
		async removeProductFromBasket(args: IremoveProductFromBasketParameters): Promise<IremoveProductFromBasketResponse> {
		
			const {  Authorization , storeCode , basketId , lineItemId , } = args;
		  const body = {  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/${storeCode}/basket/${basketId}/${lineItemId}?${queryString}`, //url
				"delete", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- emptyBasket: Empty basket ---
			description missing
		
			ENDPOINT: /api/resources/${storeCode}/basket/${basketId}
			METHOD: delete
			TAGS: [basket]
		*/
		
		
		async emptyBasket(args: IemptyBasketParameters): Promise<IemptyBasketResponse> {
		
			const {  Authorization , storeCode , basketId , } = args;
		  const body = {  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/${storeCode}/basket/${basketId}?${queryString}`, //url
				"delete", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- authenticate: Get auth token for public or registered user ---
			Returns authentication token
		
			ENDPOINT: /api/resources/oauth/authorize/${storeCode}
			METHOD: post
			TAGS: [authentication]
		*/
		
		
		async authenticate(args: IauthenticateParameters): Promise<IauthenticateResponse> {
		
			const {  storeCode , Authorization , requestBody , } = args;
		  const body = {  requestBody,  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/oauth/authorize/${storeCode}?${queryString}`, //url
				"post", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
		/*	--- unauthorizeMethod: summary missing ---
			Delete auth token
		
			ENDPOINT: /api/resources/oauth/unauthorize/
			METHOD: delete
			TAGS: [authentication]
		*/
		
		
		async unauthorizeMethod(args: IunauthorizeMethodParameters): Promise<IunauthorizeMethodResponse> {
		
			const {  Authorization , } = args;
		  const body = {  }
		  const header = {  Authorization,  }
		  const cookie = {  }
		  const query = {  }
		  //query
		  const queryString = toQueryString(query);
		
			return ApiCallWrapper(
				`/api/resources/oauth/unauthorize/?${queryString}`, //url
				"delete", //method
				"",//action
				body,
				header,
		    cookie,
			);
		}
		
}


const service = new MothershipService();
