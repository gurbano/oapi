//this file is autogenerated
export interface Service{
	info: ServiceInfo;
	servers: Array<Server>;
}
export interface ServiceInfo{
	version: string;
	title: string;
	description?: string;
}
export interface Server{
	url: string;
	description?: string;
	variables?: Map<String, any>;
};


//createSubscription
export interface createSubscriptionParameters{
	//request body Parameters
	email: string; // - eg. look@you.lol 
}

export interface createSubscriptionResponsePayload{
}
export interface createSubscriptionResponse{
	code: number;
	success: boolean;
	errors: {};
	payload: createSubscriptionResponsePayload;
}



//getNavigation
export interface getNavigationParameters{
	//path params
	store: string;
}

export interface getNavigationResponsePayload{
}
export interface getNavigationResponse{
	code: number;
	success: boolean;
	errors: {};
	payload: getNavigationResponsePayload;
}



//getProductListingPage
export interface getProductListingPageParameters{
	//path params
	store: string;
	productId: string;
}

export interface getProductListingPageResponsePayload{
}
export interface getProductListingPageResponse{
	code: number;
	success: boolean;
	errors: {};
	payload: getProductListingPageResponsePayload;
}



//authenticate
export interface authenticateParameters{
	//parameters
	store: string;
	//request body Parameters
	role: string; // - eg. REGISTERED 
	username: string; //Only needed for registered users - eg. gb_customer@ct.com 
	password: string; //Only needed for registered users - eg. 11111111 
}

export interface authenticateResponsePayload{
	access_token: string; // - eg. 1319c1a7-b984-4765-b25e-1aafbcbd72b1 
	token_type: string; // - eg. bearer 
	scope: string; // - eg. ct_store_uk 
	role: string; // - eg. REGISTERED 
	expires_in: number; // - eg. 123456 
}
export interface authenticateResponse{
	code: number;
	success: boolean;
	errors: {};
	payload: authenticateResponsePayload;
}




export default class MothershipService implements Service{
	public info: ServiceInfo;
	public servers: Array<Server>;
	constructor(){
		this.info =  {version: '1.0.0', title: 'Mothership',  };
		this.servers = [ 
		{  url: 'http://mothership-516381200.eu-west-1.elb.amazonaws.com', description: 'staging environment' },
	 ];
		console.log(this.info.title,' ready');
	}
	/* METHODS */
	/*	--- createSubscription: Create a subscription ---
		Creates customer newsletter subscription.
	
		ENDPOINT: /resources/newsletter/subscription
		METHOD: post
		TAGS: [newsletter subscription]
	*/
	async createSubscription(args: createSubscriptionParameters): Promise<createSubscriptionResponse> {
		return <createSubscriptionResponse>{};
	}
	
	/*	--- getNavigation: Get navigation data model ---
		Returns data needed for navigation panel on charlotte&#x27;s webpage.
	
		ENDPOINT: /content/{store}/navigation
		METHOD: get
		TAGS: [content]
	*/
	async getNavigation(args: getNavigationParameters): Promise<getNavigationResponse> {
		return <getNavigationResponse>{};
	}
	
	/*	--- getProductListingPage: Get product data model ---
		Returns data needed for PLP.
	
		ENDPOINT: /content/{store}/productlisting/{productId}
		METHOD: get
		TAGS: [content]
	*/
	async getProductListingPage(args: getProductListingPageParameters): Promise<getProductListingPageResponse> {
		return <getProductListingPageResponse>{};
	}
	
	/*	--- authenticate: Get auth token for public or registered user ---
		Returns authentication token
	
		ENDPOINT: /oauth/authorize/{store}
		METHOD: post
		TAGS: [authentication]
	*/
	async authenticate(args: authenticateParameters): Promise<authenticateResponse> {
		return <authenticateResponse>{};
	}
	

}


const service = new MothershipService();
